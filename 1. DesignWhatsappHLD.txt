Design WhatsApp :: 

/* -------------------------------------------------------- */
/*   ( The Authentic JS CodeBuff )
 ____                       _              _ 
 | _ ) |_  __ _ _ _ __ _ __| |_ __ ____ _ (_)
 | _ \ ' \/ _` | '_/ _` / _` \ V  V / _` || |
 |___/_||_\__,_|_| \__,_\__,_|\_/\_/\__,_|/ |
                                        |__/ 
 */
/* ---------------------------------------------------------   */
/*    Youtube: https://youtube.com/@code-with-Bharadwaj        */
/*    Github : https://github.com/Manu577228                  */
/* ----------------------------------------------------------- */

1. Functional Requirements

*) User Registration and Authentication: Users must be able to register using a phone number and log in.
*) Real-Time Messaging: Allow one-on-one and group text messaging with message delivery status (sent, delivered, read).
*) Multimedia Sharing: Users should share images, videos, documents, and voice notes.
*) Push Notifications: Notify users of new messages when the app is in the background.
*) Group Management: Create, join, or leave groups with a limit on participants.
*) Encryption: End-to-end encryption for all messages and calls.
*) Voice and Video Calls: Peer-to-peer voice and video calling.

2. Non-Functional Requirements

*) Scalability: Support millions of concurrent users globally.
*) Low Latency: Messages and calls should have minimal delay.
*) High Availability: 99.99% uptime with minimal maintenance windows.
*) Security: Use end-to-end encryption to ensure user privacy.
*) Data Durability: Messages must not be lost even during system failures.
*) Cross-Platform Support: Provide seamless experience on iOS, Android, and Web.
*) User Experience: Provide a responsive, fast, and user-friendly interface.

3. Consistency / Availability

*) Availability > Consistency: Focus on high availability using eventual consistency for messages and notifications to ensure the system is always operational.

4. APIs

*) User APIs:
1) /register: Register a user with a phone number.
2) /login: Authenticate and log in the user.

*) Messaging APIs:
1) /sendMessage: Send a text or multimedia message.
2) /fetchMessages: Retrieve conversation history.

*) Call APIs:
1) /startCall: Initiate a voice or video call.
2) /endCall: Terminate a call.

*) Group APIs:
1) /createGroup: Create a new group.
2) /addMember: Add a user to a group.

5. Architecture

*) Microservices-Based Architecture: Separate services for user management, messaging, groups, notifications, and calls.
*) Load Balancer: Distribute incoming traffic across multiple servers.
*) Event-Driven Communication: Use message queues (e.g., Kafka) for real-time updates and delivery confirmations.

6. Data Flow

*) User Authentication: The client sends login details; the authentication service verifies them and returns a token.

*) Message Flow:

1) Sender sends a message to the server.
2) The server queues the message and forwards it to the recipient(s) via WebSocket connections.
3) Media Sharing: Media files are uploaded to a storage server, and links are shared with recipients.

7. Kind of Data Store

*) NoSQL Database: Use Cassandra or DynamoDB for storing messages due to high write throughput and horizontal scalability.
*) Relational Database: Use MySQL for user profiles and metadata.
*) Blob Storage: Use Amazon S3 or similar for storing multimedia.

8. Scaling of DB

*) Horizontal Scaling: Partition user data by user ID or region to scale horizontally.
*) Replication: Use master-slave replication to ensure data availability and durability.

9. Caching & Sharding

*) Caching: Use Redis or Memcached for storing frequently accessed data like user sessions or recent messages.
*) Sharding: Implement shard keys based on user IDs to distribute the data across different database nodes.

10. Failure & Fault Tolerance

*) Replication: Data replication ensures no single point of failure.
*) Fallback Mechanism: Retry failed requests to another server in case of node failure.
*) Circuit Breakers: Prevent cascading failures by using circuit breakers in microservices.

11. Logging & Security

*) Logging: Use centralized logging systems like ELK Stack for monitoring and debugging.

*) Security:
1) Encrypt all data at rest and in transit.
2) Secure APIs with OAuth2.0 and HTTPS.
3) Regular audits and penetration tests for vulnerabilities.