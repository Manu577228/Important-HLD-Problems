Design Tiny URL ::

/* -------------------------------------------------------- */
/*   ( The Authentic JS CodeBuff )
 ___ _                      _              _ 
 | _ ) |_  __ _ _ _ __ _ __| |_ __ ____ _ (_)
 | _ \ ' \/ _` | '_/ _` / _` \ V  V / _` || |
 |___/_||_\__,_|_| \__,_\__,_|\_/\_/\__,_|/ |
                                        |__/ 
 */
/* ---------------------------------------------------------   */
/*    Youtube: https://youtube.com/@code-with-Bharadwaj        */
/*    Github : https://github.com/Manu577228                  */
/* ----------------------------------------------------------- */

1. Functional Requirements

*) URL Shortening:
Allow users to input a long URL and generate a short URL.

*) Redirection:
Redirect users to the original URL when they visit the short URL.

*) Custom Alias:
Optionally allow users to specify custom short URLs.

*) URL Analytics:
Provide basic analytics such as the number of clicks and geographic data.

*) Expiration (Optional):
Allow users to set expiration dates for short URLs.

2. Non-Functional Requirements

*) Scalability:
Handle millions of URL shortening requests and redirections daily.

*) Low Latency:
Ensure minimal delay for redirection requests.

*) High Availability:
Maintain 99.99% uptime to prevent downtime for critical redirection services.

*) Security:
Prevent abuse such as phishing links and unauthorized access to analytics.

*) Durability:
Ensure all URLs remain valid unless explicitly expired.

*) Performance:
Short URL generation and redirection must be near-instantaneous.

3. Consistency / Availability

*) Availability > Consistency:
Focus on high availability with eventual consistency for analytics and custom aliases.

4. APIs

*) Shortening APIs:
1) /createShortURL: Generate a short URL for a given long URL.
2) /customShortURL: Create a custom short URL if available.

*) Redirection APIs:
 /redirect/<shortURL>: Redirect to the original URL based on the short URL.

*) Analytics APIs:
/getAnalytics/<shortURL>: Retrieve analytics data for a specific short URL.

5. Architecture

*) Load Balancer:
Distribute incoming requests across multiple servers to handle large-scale traffic.

*) Hash-Based URL Mapping:
Use a hashing mechanism (e.g., Base62 encoding) to generate unique short URLs.

*) Microservices:
Separate services for URL shortening, redirection, and analytics.

*) Event Queue:
Use a message queue (e.g., Kafka) for handling analytics updates asynchronously.

6. Data Flow

Short URL Creation:
1) User submits a long URL.
2) Backend generates a unique short URL using hashing or encoding techniques.
3) URL mapping is stored in the database.

*) Redirection:
1) User visits the short URL.
2) Backend looks up the original URL and performs a 301 redirect.

*) Analytics:
Each redirection updates click counts and logs metadata (e.g., IP, location) asynchronously.

7. Kind of Data Store

*) Relational Database (e.g., MySQL/PostgreSQL):
Store mappings between short URLs, long URLs, and user details.

*) NoSQL Database (e.g., DynamoDB/Redis):
Cache frequently accessed short URL mappings for fast lookups.

8. Scaling of DB

*) Horizontal Scaling:
Partition URLs based on a hash of the short URL or user ID.

*) Replication:
Use read replicas for handling high query traffic efficiently.

9. Caching & Sharding

*) Caching:
Use Redis or Memcached to cache frequently accessed URL mappings.

*) Sharding:
Shard URL mappings across database nodes based on short URL hash.

10. Failure & Fault Tolerance

*) Replication:
Maintain multiple replicas of URL data to prevent loss during failures.

*) Fallback Mechanism:
Retry failed requests or serve cached responses when databases are down.

*) Circuit Breakers:
Prevent cascading failures by isolating problematic components.

11. Logging & Security

*) Logging:
Log all requests and responses using a centralized system like ELK Stack for debugging and monitoring.

*) Security:
1) Use HTTPS for all APIs and redirections.
2) Validate URLs to block malicious content.
3) Implement rate limiting to prevent abuse.
