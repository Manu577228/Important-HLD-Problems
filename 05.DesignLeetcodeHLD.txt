Design Leetcode ::

/* -------------------------------------------------------- */
/*   ( The Authentic JS CodeBuff )
 ___ _                      _              _ 
 | _ ) |_  __ _ _ _ __ _ __| |_ __ ____ _ (_)
 | _ \ ' \/ _` | '_/ _` / _` \ V  V / _` || |
 |___/_||_\__,_|_| \__,_\__,_|\_/\_/\__,_|/ |
                                        |__/ 
 */
/* ---------------------------------------------------------   */
/*    Youtube: https://youtube.com/@code-with-Bharadwaj        */
/*    Github : https://github.com/Manu577228                  */
/* ----------------------------------------------------------- */

1. Functional Requirements

*) User Management:
Allow users to register/login, manage profiles, and track their progress.

*) Problem Database:
Provide a categorized repository of coding problems, including difficulty levels, tags, and company-specific filters.

*) Code Execution:
Provide a real-time code editor that supports multiple languages, test case execution, and output validation.

*) Contests:
Host live and virtual coding contests with real-time leaderboards.

*) Discussion Forums:
Provide forums for problem discussions, solutions, and community interaction.

*) Learning Modules:
Offer tutorials, problem sets, and curated learning paths for algorithms and data structures.

*) Analytics:
Track user performance, ranking, and skill improvement over time.

2. Non-Functional Requirements

*) Scalability:
Handle millions of users and concurrent code submissions globally.

*) Low Latency:
Provide near-instant feedback on code execution and submissions.

*) High Availability:
Ensure uptime during peak usage, such as during contests.

*) Security:
Protect user code and submissions from unauthorized access or plagiarism.

*) Data Integrity:
Ensure accuracy of problem data, user progress, and rankings.

*) Cross-Platform Support:
Offer a seamless experience across web, mobile, and desktop platforms.

3. Consistency / Availability

*) Consistency > Availability:
Ensure strict consistency for user submissions, rankings, and problem data.

4. APIs

*) User APIs:
1) /register: Register a new user.
2) /login: Authenticate users.
3) /profile: Fetch and update user details.

*) Problem APIs:
1) /getProblems: Fetch problems based on difficulty, tags, etc.
2) /getProblemDetails: Retrieve details of a specific problem.

*) Submission APIs:
1) /submitCode: Submit code for execution and validation.
2) /getSubmissionResult: Fetch the result of a code submission.

*) Contest APIs:
1) /getContestDetails: Fetch details of ongoing/upcoming contests.
2) /submitContestSolution: Submit solutions for contest problems.

5. Architecture

*) Microservices-Based Architecture:
Separate services for user management, problems, submissions, contests, and analytics.

*) Load Balancer:
Distribute user requests across multiple servers.

*) Code Execution Service:
Use a sandboxed environment (e.g., Docker) to securely execute user code.

*) Event-Driven Communication:
Use Kafka for real-time updates during contests and for submission results.

6. Data Flow

*) User Interaction:
Users log in and access problems, contests, or their profile.

*) Problem Solving:
Users submit code via the editor; the code is sent to the execution service.

*) Code Execution:
The execution service runs the code, validates it, and returns the result.

Contest Flow:
Contest data is fetched in real-time; leaderboards are updated based on submissions.

7. Kind of Data Store

*) Relational Database (e.g., MySQL/PostgreSQL):
Store user profiles, problem metadata, and contest results.

*) NoSQL Database (e.g., MongoDB/DynamoDB):
Store code submissions and discussion forum data for flexible querying.

*) Blob Storage (e.g., Amazon S3):
Store problem images, tutorials, and other large media files.

8. Scaling of DB

*) Horizontal Scaling:
Partition problem data and user submissions by user or problem ID.

*) Replication:
Use master-slave replication for read-heavy operations like fetching problems and user progress.

9. Caching & Sharding

*) Caching:
Use Redis or Memcached for frequently accessed data like problem lists and user progress.

*) Sharding:
Shard data based on user IDs or problem categories to distribute load across multiple nodes.

10. Failure & Fault Tolerance

*) Replication:
Ensure data replication for submissions and user data to avoid single points of failure.

*) Sandbox Isolation:
Run code execution in isolated environments to prevent system-wide failures.

*) Fallback Mechanisms:
Queue submissions during downtime and process them once services are restored.

11. Logging & Security

*) Logging:
Centralized logging using tools like ELK Stack to monitor errors and user activity.

*) Security:
1) Encrypt user submissions and profiles at rest and in transit.
2) Secure APIs with OAuth2.0 and HTTPS.
3) Use plagiarism detection tools to maintain the integrity of submissions.
